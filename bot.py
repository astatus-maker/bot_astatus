import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes, CallbackQueryHandler
)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

import config
import database as db

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TYPING_PROBLEM, UPLOADING_PHOTO = range(2)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username
    full_name = user.full_name

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.add_user(user_id, username, full_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (—á—Ç–æ–±—ã —Å—Ä–∞–∑—É –¥–∞—Ç—å –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
    if user_id in config.ADMIN_IDS:
        db.update_user_role(user_id, 'manager')
        keyboard = [['üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'], ['üë®‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_html(
            rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
            reply_markup=reply_markup
        )
    else:
        # –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        keyboard = [['üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'], ['üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_html(
            rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç –¥–ª—è –∑–∞—è–≤–æ–∫.",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    user_data = db.get_user(user_id)

    if text == 'üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
            reply_markup=ReplyKeyboardRemove()
        )
        return TYPING_PROBLEM

    elif text == 'üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏':
        requests = db.get_requests(user_id=user_id)
        if not requests:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
            return ConversationHandler.END
        for req in requests:
            status_map = {'new': 'üÜï –ù–æ–≤–∞—è', 'assigned': 'üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–µ–Ω–∞', 'in_progress': 'üîß –í —Ä–∞–±–æ—Ç–µ', 'done': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞', 'confirmed': '‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'}
            status_text = status_map.get(req[3], req[3])
            message_text = f"–ó–∞—è–≤–∫–∞ #{req[0]}\n–ü—Ä–æ–±–ª–µ–º–∞: {req[2]}\n–°—Ç–∞—Ç—É—Å: {status_text}"
            await update.message.reply_text(message_text)
        return ConversationHandler.END

    elif text == 'üë®‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç' and user_data[3] == 'manager':
        keyboard = [
            ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏', 'üîß –í —Ä–∞–±–æ—Ç–µ'],
            ['‚úÖ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', 'üìä –í—Å–µ –∑–∞—è–≤–∫–∏']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=reply_markup)
        return ConversationHandler.END

    elif text == 'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏' and user_data[3] == 'manager':
        requests = db.get_requests(status='new')
        if not requests:
            await update.message.reply_text("–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
            return ConversationHandler.END
        for req in requests:
            message_text = f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{req[0]}\n–û—Ç: @{req[1]}\n–ü—Ä–æ–±–ª–µ–º–∞: {req[2]}"
            keyboard = [[InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data=f"assign_{req[0]}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if req[5]: # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                await update.message.reply_photo(req[5], caption=message_text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(message_text, reply_markup=reply_markup)
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
async def receive_problem_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    problem_text = update.message.text
    context.user_data['problem_text'] = problem_text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ).")
    return UPLOADING_PHOTO

# –ü—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ
async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    problem_text = context.user_data['problem_text']
    req_id = db.add_request(user_id, problem_text)
    await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ #{req_id} —Å–æ–∑–¥–∞–Ω–∞!")
    return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    problem_text = context.user_data['problem_text']
    photo_file = await update.message.photo[-1].get_file()
    photo_path = f"photos/before_{user_id}_{update.message.message_id}.jpg"
    await photo_file.download_to_drive(photo_path)
    req_id = db.add_request(user_id, problem_text, photo_path)
    await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ #{req_id} —Å–æ–∑–¥–∞–Ω–∞ —Å —Ñ–æ—Ç–æ!")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞)
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    if data.startswith('assign_'):
        req_id = int(data.split('_')[1])
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ –ë–î –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–∏–º –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ (id=999)
        db.assign_request(req_id, 999)
        await query.edit_message_caption(caption=query.message.caption + "\n\n‚úÖ ")
    # ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫

# –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardMarkup([['üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏']], resize_keyboard=True))
    return ConversationHandler.END

def main():
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(config.BOT_TOKEN).build()

    # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), handle_main_menu)],
        states={
            TYPING_PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_problem_description)],
            UPLOADING_PHOTO: [
                MessageHandler(filters.PHOTO, receive_photo),
                CommandHandler('skip', skip_photo)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
